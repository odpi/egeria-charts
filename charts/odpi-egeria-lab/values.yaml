# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project.
---

service:
  # Change this to 'NodePort' if you want externalized addresses for our services.
  # If not, expose the service manually after deployment ie using a LoadBalancer
  #
  # For example to expose the egeria lab stateful set you might use:
  # kubectl expose odpi-egeria-lab-dev --name egeria-dev
  type: ClusterIP
  #type: NodePort
  nodeport:
    jupyter: 30888
    core: 30080
    datalake: 30081
    dev: 30082
    factory: 30083
    ui: 30443
    presentation: 30091
    uistatic: 31088
    nginx: 31443
    debug:
      core: 31005
      datalake: 31006
      dev: 31007
      factory: 31008
      ui: 31009
      #TODO: Debug support for node application (presentation server)

egeria:
  #logging: OFF
  development: true
  version: "3.5"
  #repositoryType: "local-graph-repository"
  repositoryType: "in-memory-repository"
  # See https://github.com/odpi/egeria-charts/issues/56 for status of the Egeria UI (polymer) in this environment
  # Set to 'true' to deploy the Egeria UI, but note the configuration may not work properly
  egeriaui: true

debug:
  egeriaJVM: false

# Defaults for the images (can be overridden here or individually, see comment below)
# Note for egeria provided images we use the version specified above
imageDefaults:
  registry: quay.io
  namespace: odpi
  tag: latest
  #pullPolicy is now automatically set to Always for snapshots, and IfNotPresent for release
  #pullPolicy: IfNotPresent

# The following section defines all of the DOCKER images being used by this chart. Normally they should be left as is,
# but are exposed here in case the user wishes to extend. By default, each will use the 'imageDefaults' above, but
# these can be individually overridden for each image, if desired, by providing a subkey for 'namespace', 'tag' or
# 'pullPolicy' with the value to use for the override (if you want to use the public Docker registry, use
# 'docker.io/library' as the registry override, and set namespace to be your user or organization id).
# Note that now 'pullPolicy' is automatically set to 'Always' for snapshots, and 'IfNotPresent' for stable releases
#
#  To build from egeria source - (example)
#  mvn clean install -Ddocker -Ddocker.registry=localhost:5000 -Ddocker.repo=odpi
image:
  egeria:
    name: egeria
  presentation:
    name: egeria-react-ui
    tag: "3.5.0"
  configure:
    name: egeria-configure
  jupyter:
    name: jupyter
    tag: "latest"
  uistatic:
    name: egeria-ui
    tag: "3.2.0"
  nginx:
    registry: public.ecr.aws
    name: nginx/nginx
    tag: "stable"

# Standard helm best practice
rbac:
  # Specifies whether RBAC resources should be created
  create: true

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

# --- 
# Persistence
# 
# If you enable persistence 
#  - Any metadata servers configured by the notebooks will be configured to use the graph repository
#  - A persistent volume (pvc) will be used to store all cohort registry, server config, and graph data
#  - the name of the volume is based on the helm 'release' so same release will mean the data will remain on redeployment
#    or starting
#  - Note that the 'config' notebook will actually start servers if config is found, and you may get unexpected results
#  - This config is provided to help with those using the lab environment as a base for further work
#  - You may also wish to look at the 'egeria-base' helm chart for a single persistent server
#  - You should also set all the kafka persistence settings below to 'true'
#  - You should also set the value of egeria.repositoryType above in 'in-memory-repository'


persistence:
  enabled: false

# Provide a list of URLs to all files (i.e. jars) that should be downloaded for connectivity, where
# each item in the list is a dict pair of 'filename' and 'url', e.g.
# - filename: my-connector-file.jar
#   url: https://some-location/com?even=with&some-parameters=embedded&for-dynamic-download=true
downloads: